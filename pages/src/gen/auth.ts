/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace discord {
    export class GetOAuthUrlResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            url?: string;
        }): GetOAuthUrlResponse {
            const message = new GetOAuthUrlResponse({});
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOAuthUrlResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOAuthUrlResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetOAuthUrlResponse {
            return GetOAuthUrlResponse.deserialize(bytes);
        }
    }
    export class LoginWithDiscordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            code?: string;
        }): LoginWithDiscordRequest {
            const message = new LoginWithDiscordRequest({});
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginWithDiscordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginWithDiscordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginWithDiscordRequest {
            return LoginWithDiscordRequest.deserialize(bytes);
        }
    }
    export class LoginWithDiscordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            access_token?: DiscordAccessTokenResponse;
            error?: never;
        } | {
            access_token?: never;
            error?: DiscordErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getWrapperField(this, DiscordAccessTokenResponse, 1) as DiscordAccessTokenResponse;
        }
        set access_token(value: DiscordAccessTokenResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_access_token() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, DiscordErrorResponse, 2) as DiscordErrorResponse;
        }
        set error(value: DiscordErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get response() {
            const cases: {
                [index: number]: "none" | "access_token" | "error";
            } = {
                0: "none",
                1: "access_token",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            access_token?: ReturnType<typeof DiscordAccessTokenResponse.prototype.toObject>;
            error?: ReturnType<typeof DiscordErrorResponse.prototype.toObject>;
        }): LoginWithDiscordResponse {
            const message = new LoginWithDiscordResponse({});
            if (data.access_token != null) {
                message.access_token = DiscordAccessTokenResponse.fromObject(data.access_token);
            }
            if (data.error != null) {
                message.error = DiscordErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: ReturnType<typeof DiscordAccessTokenResponse.prototype.toObject>;
                error?: ReturnType<typeof DiscordErrorResponse.prototype.toObject>;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_access_token)
                writer.writeMessage(1, this.access_token, () => this.access_token.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginWithDiscordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginWithDiscordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.access_token, () => message.access_token = DiscordAccessTokenResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = DiscordErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginWithDiscordResponse {
            return LoginWithDiscordResponse.deserialize(bytes);
        }
    }
    export class DiscordErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            error?: string;
            error_description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("error_description" in data && data.error_description != undefined) {
                    this.error_description = data.error_description;
                }
            }
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error_description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            error?: string;
            error_description?: string;
        }): DiscordErrorResponse {
            const message = new DiscordErrorResponse({});
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.error_description != null) {
                message.error_description = data.error_description;
            }
            return message;
        }
        toObject() {
            const data: {
                error?: string;
                error_description?: string;
            } = {};
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.error_description != null) {
                data.error_description = this.error_description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error.length)
                writer.writeString(1, this.error);
            if (this.error_description.length)
                writer.writeString(2, this.error_description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscordErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscordErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error = reader.readString();
                        break;
                    case 2:
                        message.error_description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscordErrorResponse {
            return DiscordErrorResponse.deserialize(bytes);
        }
    }
    export class DiscordAccessTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_token?: string;
            refresh_token?: string;
            expires_in?: number;
            token_type?: string;
            scope?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("expires_in" in data && data.expires_in != undefined) {
                    this.expires_in = data.expires_in;
                }
                if ("token_type" in data && data.token_type != undefined) {
                    this.token_type = data.token_type;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get expires_in() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set expires_in(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get token_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set token_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            access_token?: string;
            refresh_token?: string;
            expires_in?: number;
            token_type?: string;
            scope?: string;
        }): DiscordAccessTokenResponse {
            const message = new DiscordAccessTokenResponse({});
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.expires_in != null) {
                message.expires_in = data.expires_in;
            }
            if (data.token_type != null) {
                message.token_type = data.token_type;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: string;
                refresh_token?: string;
                expires_in?: number;
                token_type?: string;
                scope?: string;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.expires_in != null) {
                data.expires_in = this.expires_in;
            }
            if (this.token_type != null) {
                data.token_type = this.token_type;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_token.length)
                writer.writeString(1, this.access_token);
            if (this.refresh_token.length)
                writer.writeString(2, this.refresh_token);
            if (this.expires_in != 0)
                writer.writeInt64(3, this.expires_in);
            if (this.token_type.length)
                writer.writeString(4, this.token_type);
            if (this.scope.length)
                writer.writeString(5, this.scope);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscordAccessTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscordAccessTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_token = reader.readString();
                        break;
                    case 2:
                        message.refresh_token = reader.readString();
                        break;
                    case 3:
                        message.expires_in = reader.readInt64();
                        break;
                    case 4:
                        message.token_type = reader.readString();
                        break;
                    case 5:
                        message.scope = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscordAccessTokenResponse {
            return DiscordAccessTokenResponse.deserialize(bytes);
        }
    }
    export class RefreshAccessTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            refresh_token?: string;
        }): RefreshAccessTokenRequest {
            const message = new RefreshAccessTokenRequest({});
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                refresh_token?: string;
            } = {};
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.refresh_token.length)
                writer.writeString(1, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshAccessTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshAccessTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshAccessTokenRequest {
            return RefreshAccessTokenRequest.deserialize(bytes);
        }
    }
    export class GetMyInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            access_token?: string;
        }): GetMyInfoRequest {
            const message = new GetMyInfoRequest({});
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: string;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_token.length)
                writer.writeString(1, this.access_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMyInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMyInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMyInfoRequest {
            return GetMyInfoRequest.deserialize(bytes);
        }
    }
    export class GetMyInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            my_info?: UserInfo;
            error?: never;
        } | {
            my_info?: never;
            error?: DiscordErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("my_info" in data && data.my_info != undefined) {
                    this.my_info = data.my_info;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get my_info() {
            return pb_1.Message.getWrapperField(this, UserInfo, 1) as UserInfo;
        }
        set my_info(value: UserInfo) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_my_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, DiscordErrorResponse, 2) as DiscordErrorResponse;
        }
        set error(value: DiscordErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get response() {
            const cases: {
                [index: number]: "none" | "my_info" | "error";
            } = {
                0: "none",
                1: "my_info",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            my_info?: ReturnType<typeof UserInfo.prototype.toObject>;
            error?: ReturnType<typeof DiscordErrorResponse.prototype.toObject>;
        }): GetMyInfoResponse {
            const message = new GetMyInfoResponse({});
            if (data.my_info != null) {
                message.my_info = UserInfo.fromObject(data.my_info);
            }
            if (data.error != null) {
                message.error = DiscordErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                my_info?: ReturnType<typeof UserInfo.prototype.toObject>;
                error?: ReturnType<typeof DiscordErrorResponse.prototype.toObject>;
            } = {};
            if (this.my_info != null) {
                data.my_info = this.my_info.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_my_info)
                writer.writeMessage(1, this.my_info, () => this.my_info.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMyInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMyInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.my_info, () => message.my_info = UserInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = DiscordErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMyInfoResponse {
            return GetMyInfoResponse.deserialize(bytes);
        }
    }
    export class UserInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            user_name?: string;
            avatar?: string;
            discriminator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("discriminator" in data && data.discriminator != undefined) {
                    this.discriminator = data.discriminator;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get discriminator() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set discriminator(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            user_id?: string;
            user_name?: string;
            avatar?: string;
            discriminator?: string;
        }): UserInfo {
            const message = new UserInfo({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.discriminator != null) {
                message.discriminator = data.discriminator;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                user_name?: string;
                avatar?: string;
                discriminator?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.discriminator != null) {
                data.discriminator = this.discriminator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.user_name.length)
                writer.writeString(2, this.user_name);
            if (this.avatar.length)
                writer.writeString(3, this.avatar);
            if (this.discriminator.length)
                writer.writeString(4, this.discriminator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.user_name = reader.readString();
                        break;
                    case 3:
                        message.avatar = reader.readString();
                        break;
                    case 4:
                        message.discriminator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfo {
            return UserInfo.deserialize(bytes);
        }
    }
    export class ValidateGuildIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            guild_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("guild_id" in data && data.guild_id != undefined) {
                    this.guild_id = data.guild_id;
                }
            }
        }
        get guild_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set guild_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            guild_id?: string;
        }): ValidateGuildIdRequest {
            const message = new ValidateGuildIdRequest({});
            if (data.guild_id != null) {
                message.guild_id = data.guild_id;
            }
            return message;
        }
        toObject() {
            const data: {
                guild_id?: string;
            } = {};
            if (this.guild_id != null) {
                data.guild_id = this.guild_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guild_id.length)
                writer.writeString(1, this.guild_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateGuildIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateGuildIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guild_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateGuildIdRequest {
            return ValidateGuildIdRequest.deserialize(bytes);
        }
    }
    export class ValidateGuildIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_valid" in data && data.is_valid != undefined) {
                    this.is_valid = data.is_valid;
                }
            }
        }
        get is_valid() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_valid(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_valid?: boolean;
        }): ValidateGuildIdResponse {
            const message = new ValidateGuildIdResponse({});
            if (data.is_valid != null) {
                message.is_valid = data.is_valid;
            }
            return message;
        }
        toObject() {
            const data: {
                is_valid?: boolean;
            } = {};
            if (this.is_valid != null) {
                data.is_valid = this.is_valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_valid != false)
                writer.writeBool(1, this.is_valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateGuildIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateGuildIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateGuildIdResponse {
            return ValidateGuildIdResponse.deserialize(bytes);
        }
    }
    export class ValidateUserIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            guild_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("guild_id" in data && data.guild_id != undefined) {
                    this.guild_id = data.guild_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get guild_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set guild_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: string;
            guild_id?: string;
        }): ValidateUserIdRequest {
            const message = new ValidateUserIdRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.guild_id != null) {
                message.guild_id = data.guild_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                guild_id?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.guild_id != null) {
                data.guild_id = this.guild_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.guild_id.length)
                writer.writeString(2, this.guild_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateUserIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateUserIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.guild_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateUserIdRequest {
            return ValidateUserIdRequest.deserialize(bytes);
        }
    }
    export class ValidateUserIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_valid" in data && data.is_valid != undefined) {
                    this.is_valid = data.is_valid;
                }
            }
        }
        get is_valid() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_valid(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_valid?: boolean;
        }): ValidateUserIdResponse {
            const message = new ValidateUserIdResponse({});
            if (data.is_valid != null) {
                message.is_valid = data.is_valid;
            }
            return message;
        }
        toObject() {
            const data: {
                is_valid?: boolean;
            } = {};
            if (this.is_valid != null) {
                data.is_valid = this.is_valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_valid != false)
                writer.writeBool(1, this.is_valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateUserIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateUserIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateUserIdResponse {
            return ValidateUserIdResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDiscordService {
        static definition = {
            GetOAuthUrl: {
                path: "/discord.Discord/GetOAuthUrl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetOAuthUrlResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetOAuthUrlResponse.deserialize(new Uint8Array(bytes))
            },
            LoginWithDiscord: {
                path: "/discord.Discord/LoginWithDiscord",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginWithDiscordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginWithDiscordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginWithDiscordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginWithDiscordResponse.deserialize(new Uint8Array(bytes))
            },
            RefreshAccessToken: {
                path: "/discord.Discord/RefreshAccessToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RefreshAccessTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RefreshAccessTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginWithDiscordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginWithDiscordResponse.deserialize(new Uint8Array(bytes))
            },
            GetMyInfo: {
                path: "/discord.Discord/GetMyInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMyInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMyInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetMyInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetMyInfoResponse.deserialize(new Uint8Array(bytes))
            },
            ValidateGuildId: {
                path: "/discord.Discord/ValidateGuildId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ValidateGuildIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ValidateGuildIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ValidateGuildIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ValidateGuildIdResponse.deserialize(new Uint8Array(bytes))
            },
            ValidateUserId: {
                path: "/discord.Discord/ValidateUserId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ValidateUserIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ValidateUserIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ValidateUserIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ValidateUserIdResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetOAuthUrl(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetOAuthUrlResponse>, callback: grpc_1.sendUnaryData<GetOAuthUrlResponse>): void;
        abstract LoginWithDiscord(call: grpc_1.ServerUnaryCall<LoginWithDiscordRequest, LoginWithDiscordResponse>, callback: grpc_1.sendUnaryData<LoginWithDiscordResponse>): void;
        abstract RefreshAccessToken(call: grpc_1.ServerUnaryCall<RefreshAccessTokenRequest, LoginWithDiscordResponse>, callback: grpc_1.sendUnaryData<LoginWithDiscordResponse>): void;
        abstract GetMyInfo(call: grpc_1.ServerUnaryCall<GetMyInfoRequest, GetMyInfoResponse>, callback: grpc_1.sendUnaryData<GetMyInfoResponse>): void;
        abstract ValidateGuildId(call: grpc_1.ServerUnaryCall<ValidateGuildIdRequest, ValidateGuildIdResponse>, callback: grpc_1.sendUnaryData<ValidateGuildIdResponse>): void;
        abstract ValidateUserId(call: grpc_1.ServerUnaryCall<ValidateUserIdRequest, ValidateUserIdResponse>, callback: grpc_1.sendUnaryData<ValidateUserIdResponse>): void;
    }
    export class DiscordClient extends grpc_1.makeGenericClientConstructor(UnimplementedDiscordService.definition, "Discord", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetOAuthUrl: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetOAuthUrlResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetOAuthUrlResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetOAuthUrlResponse>, callback?: grpc_1.requestCallback<GetOAuthUrlResponse>): grpc_1.ClientUnaryCall => {
            return super.GetOAuthUrl(message, metadata, options, callback);
        };
        LoginWithDiscord: GrpcUnaryServiceInterface<LoginWithDiscordRequest, LoginWithDiscordResponse> = (message: LoginWithDiscordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginWithDiscordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginWithDiscordResponse>, callback?: grpc_1.requestCallback<LoginWithDiscordResponse>): grpc_1.ClientUnaryCall => {
            return super.LoginWithDiscord(message, metadata, options, callback);
        };
        RefreshAccessToken: GrpcUnaryServiceInterface<RefreshAccessTokenRequest, LoginWithDiscordResponse> = (message: RefreshAccessTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginWithDiscordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginWithDiscordResponse>, callback?: grpc_1.requestCallback<LoginWithDiscordResponse>): grpc_1.ClientUnaryCall => {
            return super.RefreshAccessToken(message, metadata, options, callback);
        };
        GetMyInfo: GrpcUnaryServiceInterface<GetMyInfoRequest, GetMyInfoResponse> = (message: GetMyInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetMyInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetMyInfoResponse>, callback?: grpc_1.requestCallback<GetMyInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.GetMyInfo(message, metadata, options, callback);
        };
        ValidateGuildId: GrpcUnaryServiceInterface<ValidateGuildIdRequest, ValidateGuildIdResponse> = (message: ValidateGuildIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ValidateGuildIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ValidateGuildIdResponse>, callback?: grpc_1.requestCallback<ValidateGuildIdResponse>): grpc_1.ClientUnaryCall => {
            return super.ValidateGuildId(message, metadata, options, callback);
        };
        ValidateUserId: GrpcUnaryServiceInterface<ValidateUserIdRequest, ValidateUserIdResponse> = (message: ValidateUserIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ValidateUserIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ValidateUserIdResponse>, callback?: grpc_1.requestCallback<ValidateUserIdResponse>): grpc_1.ClientUnaryCall => {
            return super.ValidateUserId(message, metadata, options, callback);
        };
    }
}
