// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "auth.proto" (package "discord", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message discord.GetOAuthUrlRequest
 */
export interface GetOAuthUrlRequest {
    /**
     * @generated from protobuf field: string redirect_uri = 1;
     */
    redirectUri: string;
}
/**
 * @generated from protobuf message discord.GetOAuthUrlResponse
 */
export interface GetOAuthUrlResponse {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message discord.LoginWithDiscordRequest
 */
export interface LoginWithDiscordRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: string redirect_uri = 2;
     */
    redirectUri: string;
}
/**
 * @generated from protobuf message discord.LoginWithDiscordResponse
 */
export interface LoginWithDiscordResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "accessToken";
        /**
         * @generated from protobuf field: discord.DiscordAccessTokenResponse access_token = 1;
         */
        accessToken: DiscordAccessTokenResponse;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: discord.DiscordErrorResponse error = 2;
         */
        error: DiscordErrorResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message discord.DiscordErrorResponse
 */
export interface DiscordErrorResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
    /**
     * @generated from protobuf field: string error_description = 2;
     */
    errorDescription: string;
}
/**
 * @generated from protobuf message discord.DiscordAccessTokenResponse
 */
export interface DiscordAccessTokenResponse {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string refresh_token = 2;
     */
    refreshToken: string;
    /**
     * @generated from protobuf field: int64 expires_in = 3;
     */
    expiresIn: bigint;
    /**
     * @generated from protobuf field: string token_type = 4;
     */
    tokenType: string;
    /**
     * @generated from protobuf field: string scope = 5;
     */
    scope: string;
}
/**
 * @generated from protobuf message discord.RefreshAccessTokenRequest
 */
export interface RefreshAccessTokenRequest {
    /**
     * @generated from protobuf field: string refresh_token = 1;
     */
    refreshToken: string;
}
/**
 * @generated from protobuf message discord.GetMyInfoRequest
 */
export interface GetMyInfoRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
}
/**
 * @generated from protobuf message discord.GetMyInfoResponse
 */
export interface GetMyInfoResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "myInfo";
        /**
         * @generated from protobuf field: discord.UserInfo my_info = 1;
         */
        myInfo: UserInfo;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: discord.DiscordErrorResponse error = 2;
         */
        error: DiscordErrorResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message discord.UserInfo
 */
export interface UserInfo {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: string avatar = 3;
     */
    avatar: string;
    /**
     * @generated from protobuf field: string discriminator = 4;
     */
    discriminator: string;
}
/**
 * @generated from protobuf message discord.ValidateGuildIdRequest
 */
export interface ValidateGuildIdRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
}
/**
 * @generated from protobuf message discord.ValidateGuildIdResponse
 */
export interface ValidateGuildIdResponse {
    /**
     * @generated from protobuf field: discord.DiscordGuild guild_info = 2;
     */
    guildInfo?: DiscordGuild;
}
/**
 * @generated from protobuf message discord.DiscordGuild
 */
export interface DiscordGuild {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string guild_name = 2;
     */
    guildName: string;
    /**
     * @generated from protobuf field: string icon = 3;
     */
    icon: string;
}
/**
 * @generated from protobuf message discord.ValidateUserIdRequest
 */
export interface ValidateUserIdRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string guild_id = 2;
     */
    guildId: string;
}
/**
 * @generated from protobuf message discord.ValidateUserIdResponse
 */
export interface ValidateUserIdResponse {
    /**
     * @generated from protobuf field: bool is_valid = 1;
     */
    isValid: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetOAuthUrlRequest$Type extends MessageType<GetOAuthUrlRequest> {
    constructor() {
        super("discord.GetOAuthUrlRequest", [
            { no: 1, name: "redirect_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOAuthUrlRequest>): GetOAuthUrlRequest {
        const message = { redirectUri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOAuthUrlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOAuthUrlRequest): GetOAuthUrlRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string redirect_uri */ 1:
                    message.redirectUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOAuthUrlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string redirect_uri = 1; */
        if (message.redirectUri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.redirectUri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.GetOAuthUrlRequest
 */
export const GetOAuthUrlRequest = new GetOAuthUrlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOAuthUrlResponse$Type extends MessageType<GetOAuthUrlResponse> {
    constructor() {
        super("discord.GetOAuthUrlResponse", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOAuthUrlResponse>): GetOAuthUrlResponse {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOAuthUrlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOAuthUrlResponse): GetOAuthUrlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOAuthUrlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.GetOAuthUrlResponse
 */
export const GetOAuthUrlResponse = new GetOAuthUrlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginWithDiscordRequest$Type extends MessageType<LoginWithDiscordRequest> {
    constructor() {
        super("discord.LoginWithDiscordRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "redirect_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginWithDiscordRequest>): LoginWithDiscordRequest {
        const message = { code: "", redirectUri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginWithDiscordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginWithDiscordRequest): LoginWithDiscordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string redirect_uri */ 2:
                    message.redirectUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginWithDiscordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string redirect_uri = 2; */
        if (message.redirectUri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.redirectUri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.LoginWithDiscordRequest
 */
export const LoginWithDiscordRequest = new LoginWithDiscordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginWithDiscordResponse$Type extends MessageType<LoginWithDiscordResponse> {
    constructor() {
        super("discord.LoginWithDiscordResponse", [
            { no: 1, name: "access_token", kind: "message", oneof: "response", T: () => DiscordAccessTokenResponse },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => DiscordErrorResponse }
        ]);
    }
    create(value?: PartialMessage<LoginWithDiscordResponse>): LoginWithDiscordResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginWithDiscordResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginWithDiscordResponse): LoginWithDiscordResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* discord.DiscordAccessTokenResponse access_token */ 1:
                    message.response = {
                        oneofKind: "accessToken",
                        accessToken: DiscordAccessTokenResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).accessToken)
                    };
                    break;
                case /* discord.DiscordErrorResponse error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: DiscordErrorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginWithDiscordResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* discord.DiscordAccessTokenResponse access_token = 1; */
        if (message.response.oneofKind === "accessToken")
            DiscordAccessTokenResponse.internalBinaryWrite(message.response.accessToken, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* discord.DiscordErrorResponse error = 2; */
        if (message.response.oneofKind === "error")
            DiscordErrorResponse.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.LoginWithDiscordResponse
 */
export const LoginWithDiscordResponse = new LoginWithDiscordResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscordErrorResponse$Type extends MessageType<DiscordErrorResponse> {
    constructor() {
        super("discord.DiscordErrorResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiscordErrorResponse>): DiscordErrorResponse {
        const message = { error: "", errorDescription: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DiscordErrorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscordErrorResponse): DiscordErrorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                case /* string error_description */ 2:
                    message.errorDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscordErrorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        /* string error_description = 2; */
        if (message.errorDescription !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.DiscordErrorResponse
 */
export const DiscordErrorResponse = new DiscordErrorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscordAccessTokenResponse$Type extends MessageType<DiscordAccessTokenResponse> {
    constructor() {
        super("discord.DiscordAccessTokenResponse", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expires_in", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "token_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "scope", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiscordAccessTokenResponse>): DiscordAccessTokenResponse {
        const message = { accessToken: "", refreshToken: "", expiresIn: 0n, tokenType: "", scope: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DiscordAccessTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscordAccessTokenResponse): DiscordAccessTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                case /* int64 expires_in */ 3:
                    message.expiresIn = reader.int64().toBigInt();
                    break;
                case /* string token_type */ 4:
                    message.tokenType = reader.string();
                    break;
                case /* string scope */ 5:
                    message.scope = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscordAccessTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        /* int64 expires_in = 3; */
        if (message.expiresIn !== 0n)
            writer.tag(3, WireType.Varint).int64(message.expiresIn);
        /* string token_type = 4; */
        if (message.tokenType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tokenType);
        /* string scope = 5; */
        if (message.scope !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.scope);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.DiscordAccessTokenResponse
 */
export const DiscordAccessTokenResponse = new DiscordAccessTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshAccessTokenRequest$Type extends MessageType<RefreshAccessTokenRequest> {
    constructor() {
        super("discord.RefreshAccessTokenRequest", [
            { no: 1, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RefreshAccessTokenRequest>): RefreshAccessTokenRequest {
        const message = { refreshToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefreshAccessTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshAccessTokenRequest): RefreshAccessTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refresh_token */ 1:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshAccessTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refresh_token = 1; */
        if (message.refreshToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.RefreshAccessTokenRequest
 */
export const RefreshAccessTokenRequest = new RefreshAccessTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMyInfoRequest$Type extends MessageType<GetMyInfoRequest> {
    constructor() {
        super("discord.GetMyInfoRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetMyInfoRequest>): GetMyInfoRequest {
        const message = { accessToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMyInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMyInfoRequest): GetMyInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMyInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.GetMyInfoRequest
 */
export const GetMyInfoRequest = new GetMyInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMyInfoResponse$Type extends MessageType<GetMyInfoResponse> {
    constructor() {
        super("discord.GetMyInfoResponse", [
            { no: 1, name: "my_info", kind: "message", oneof: "response", T: () => UserInfo },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => DiscordErrorResponse }
        ]);
    }
    create(value?: PartialMessage<GetMyInfoResponse>): GetMyInfoResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMyInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMyInfoResponse): GetMyInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* discord.UserInfo my_info */ 1:
                    message.response = {
                        oneofKind: "myInfo",
                        myInfo: UserInfo.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).myInfo)
                    };
                    break;
                case /* discord.DiscordErrorResponse error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: DiscordErrorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMyInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* discord.UserInfo my_info = 1; */
        if (message.response.oneofKind === "myInfo")
            UserInfo.internalBinaryWrite(message.response.myInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* discord.DiscordErrorResponse error = 2; */
        if (message.response.oneofKind === "error")
            DiscordErrorResponse.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.GetMyInfoResponse
 */
export const GetMyInfoResponse = new GetMyInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInfo$Type extends MessageType<UserInfo> {
    constructor() {
        super("discord.UserInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "discriminator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfo>): UserInfo {
        const message = { userId: "", userName: "", avatar: "", discriminator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfo): UserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string avatar */ 3:
                    message.avatar = reader.string();
                    break;
                case /* string discriminator */ 4:
                    message.discriminator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string avatar = 3; */
        if (message.avatar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatar);
        /* string discriminator = 4; */
        if (message.discriminator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.discriminator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.UserInfo
 */
export const UserInfo = new UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateGuildIdRequest$Type extends MessageType<ValidateGuildIdRequest> {
    constructor() {
        super("discord.ValidateGuildIdRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ValidateGuildIdRequest>): ValidateGuildIdRequest {
        const message = { guildId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateGuildIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateGuildIdRequest): ValidateGuildIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateGuildIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.ValidateGuildIdRequest
 */
export const ValidateGuildIdRequest = new ValidateGuildIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateGuildIdResponse$Type extends MessageType<ValidateGuildIdResponse> {
    constructor() {
        super("discord.ValidateGuildIdResponse", [
            { no: 2, name: "guild_info", kind: "message", T: () => DiscordGuild }
        ]);
    }
    create(value?: PartialMessage<ValidateGuildIdResponse>): ValidateGuildIdResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateGuildIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateGuildIdResponse): ValidateGuildIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* discord.DiscordGuild guild_info */ 2:
                    message.guildInfo = DiscordGuild.internalBinaryRead(reader, reader.uint32(), options, message.guildInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateGuildIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* discord.DiscordGuild guild_info = 2; */
        if (message.guildInfo)
            DiscordGuild.internalBinaryWrite(message.guildInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.ValidateGuildIdResponse
 */
export const ValidateGuildIdResponse = new ValidateGuildIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscordGuild$Type extends MessageType<DiscordGuild> {
    constructor() {
        super("discord.DiscordGuild", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "guild_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiscordGuild>): DiscordGuild {
        const message = { guildId: "", guildName: "", icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DiscordGuild>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscordGuild): DiscordGuild {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string guild_name */ 2:
                    message.guildName = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscordGuild, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string guild_name = 2; */
        if (message.guildName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.guildName);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.DiscordGuild
 */
export const DiscordGuild = new DiscordGuild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateUserIdRequest$Type extends MessageType<ValidateUserIdRequest> {
    constructor() {
        super("discord.ValidateUserIdRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ValidateUserIdRequest>): ValidateUserIdRequest {
        const message = { userId: "", guildId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateUserIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateUserIdRequest): ValidateUserIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string guild_id */ 2:
                    message.guildId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateUserIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string guild_id = 2; */
        if (message.guildId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.guildId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.ValidateUserIdRequest
 */
export const ValidateUserIdRequest = new ValidateUserIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateUserIdResponse$Type extends MessageType<ValidateUserIdResponse> {
    constructor() {
        super("discord.ValidateUserIdResponse", [
            { no: 1, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ValidateUserIdResponse>): ValidateUserIdResponse {
        const message = { isValid: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateUserIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateUserIdResponse): ValidateUserIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_valid */ 1:
                    message.isValid = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateUserIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_valid = 1; */
        if (message.isValid !== false)
            writer.tag(1, WireType.Varint).bool(message.isValid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord.ValidateUserIdResponse
 */
export const ValidateUserIdResponse = new ValidateUserIdResponse$Type();
/**
 * @generated ServiceType for protobuf service discord.Discord
 */
export const Discord = new ServiceType("discord.Discord", [
    { name: "GetOAuthUrl", options: {}, I: GetOAuthUrlRequest, O: GetOAuthUrlResponse },
    { name: "LoginWithDiscord", options: {}, I: LoginWithDiscordRequest, O: LoginWithDiscordResponse },
    { name: "RefreshAccessToken", options: {}, I: RefreshAccessTokenRequest, O: LoginWithDiscordResponse },
    { name: "GetMyInfo", options: {}, I: GetMyInfoRequest, O: GetMyInfoResponse },
    { name: "ValidateGuildId", options: {}, I: ValidateGuildIdRequest, O: ValidateGuildIdResponse },
    { name: "ValidateUserId", options: {}, I: ValidateUserIdRequest, O: ValidateUserIdResponse }
]);
