/**
 * @fileoverview gRPC-Web generated client stub for queue
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: queue.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.queue = require('./queue_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.queue.QueueServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.queue.QueueServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.queue.CurrentQueueRequest,
 *   !proto.queue.CurrentQueueResponse>}
 */
const methodDescriptor_QueueService_CurrentQueue = new grpc.web.MethodDescriptor(
  '/queue.QueueService/CurrentQueue',
  grpc.web.MethodType.UNARY,
  proto.queue.CurrentQueueRequest,
  proto.queue.CurrentQueueResponse,
  /**
   * @param {!proto.queue.CurrentQueueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.queue.CurrentQueueResponse.deserializeBinary
);


/**
 * @param {!proto.queue.CurrentQueueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.queue.CurrentQueueResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.queue.CurrentQueueResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServiceClient.prototype.currentQueue =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/queue.QueueService/CurrentQueue',
      request,
      metadata || {},
      methodDescriptor_QueueService_CurrentQueue,
      callback);
};


/**
 * @param {!proto.queue.CurrentQueueRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.queue.CurrentQueueResponse>}
 *     Promise that resolves to the response
 */
proto.queue.QueueServicePromiseClient.prototype.currentQueue =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/queue.QueueService/CurrentQueue',
      request,
      metadata || {},
      methodDescriptor_QueueService_CurrentQueue);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.queue.RemoveSongRequest,
 *   !proto.queue.RemoveSongResponse>}
 */
const methodDescriptor_QueueService_RemoveSong = new grpc.web.MethodDescriptor(
  '/queue.QueueService/RemoveSong',
  grpc.web.MethodType.UNARY,
  proto.queue.RemoveSongRequest,
  proto.queue.RemoveSongResponse,
  /**
   * @param {!proto.queue.RemoveSongRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.queue.RemoveSongResponse.deserializeBinary
);


/**
 * @param {!proto.queue.RemoveSongRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.queue.RemoveSongResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.queue.RemoveSongResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServiceClient.prototype.removeSong =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/queue.QueueService/RemoveSong',
      request,
      metadata || {},
      methodDescriptor_QueueService_RemoveSong,
      callback);
};


/**
 * @param {!proto.queue.RemoveSongRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.queue.RemoveSongResponse>}
 *     Promise that resolves to the response
 */
proto.queue.QueueServicePromiseClient.prototype.removeSong =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/queue.QueueService/RemoveSong',
      request,
      metadata || {},
      methodDescriptor_QueueService_RemoveSong);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.queue.SkipSongRequest,
 *   !proto.queue.SkipSongResponse>}
 */
const methodDescriptor_QueueService_SkipSong = new grpc.web.MethodDescriptor(
  '/queue.QueueService/SkipSong',
  grpc.web.MethodType.UNARY,
  proto.queue.SkipSongRequest,
  proto.queue.SkipSongResponse,
  /**
   * @param {!proto.queue.SkipSongRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.queue.SkipSongResponse.deserializeBinary
);


/**
 * @param {!proto.queue.SkipSongRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.queue.SkipSongResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.queue.SkipSongResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServiceClient.prototype.skipSong =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/queue.QueueService/SkipSong',
      request,
      metadata || {},
      methodDescriptor_QueueService_SkipSong,
      callback);
};


/**
 * @param {!proto.queue.SkipSongRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.queue.SkipSongResponse>}
 *     Promise that resolves to the response
 */
proto.queue.QueueServicePromiseClient.prototype.skipSong =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/queue.QueueService/SkipSong',
      request,
      metadata || {},
      methodDescriptor_QueueService_SkipSong);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.queue.RepeatSongRequest,
 *   !proto.queue.RepeatSongResponse>}
 */
const methodDescriptor_QueueService_RepeatSong = new grpc.web.MethodDescriptor(
  '/queue.QueueService/RepeatSong',
  grpc.web.MethodType.UNARY,
  proto.queue.RepeatSongRequest,
  proto.queue.RepeatSongResponse,
  /**
   * @param {!proto.queue.RepeatSongRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.queue.RepeatSongResponse.deserializeBinary
);


/**
 * @param {!proto.queue.RepeatSongRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.queue.RepeatSongResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.queue.RepeatSongResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServiceClient.prototype.repeatSong =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/queue.QueueService/RepeatSong',
      request,
      metadata || {},
      methodDescriptor_QueueService_RepeatSong,
      callback);
};


/**
 * @param {!proto.queue.RepeatSongRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.queue.RepeatSongResponse>}
 *     Promise that resolves to the response
 */
proto.queue.QueueServicePromiseClient.prototype.repeatSong =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/queue.QueueService/RepeatSong',
      request,
      metadata || {},
      methodDescriptor_QueueService_RepeatSong);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.queue.ShuffleQueueRequest,
 *   !proto.queue.ShuffleQueueResponse>}
 */
const methodDescriptor_QueueService_ShuffleQueue = new grpc.web.MethodDescriptor(
  '/queue.QueueService/ShuffleQueue',
  grpc.web.MethodType.UNARY,
  proto.queue.ShuffleQueueRequest,
  proto.queue.ShuffleQueueResponse,
  /**
   * @param {!proto.queue.ShuffleQueueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.queue.ShuffleQueueResponse.deserializeBinary
);


/**
 * @param {!proto.queue.ShuffleQueueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.queue.ShuffleQueueResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.queue.ShuffleQueueResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServiceClient.prototype.shuffleQueue =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/queue.QueueService/ShuffleQueue',
      request,
      metadata || {},
      methodDescriptor_QueueService_ShuffleQueue,
      callback);
};


/**
 * @param {!proto.queue.ShuffleQueueRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.queue.ShuffleQueueResponse>}
 *     Promise that resolves to the response
 */
proto.queue.QueueServicePromiseClient.prototype.shuffleQueue =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/queue.QueueService/ShuffleQueue',
      request,
      metadata || {},
      methodDescriptor_QueueService_ShuffleQueue);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.queue.ChangeSongPositionRequest,
 *   !proto.queue.ChangeSongPositionResponse>}
 */
const methodDescriptor_QueueService_ChangeSongPosition = new grpc.web.MethodDescriptor(
  '/queue.QueueService/ChangeSongPosition',
  grpc.web.MethodType.UNARY,
  proto.queue.ChangeSongPositionRequest,
  proto.queue.ChangeSongPositionResponse,
  /**
   * @param {!proto.queue.ChangeSongPositionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.queue.ChangeSongPositionResponse.deserializeBinary
);


/**
 * @param {!proto.queue.ChangeSongPositionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.queue.ChangeSongPositionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.queue.ChangeSongPositionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServiceClient.prototype.changeSongPosition =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/queue.QueueService/ChangeSongPosition',
      request,
      metadata || {},
      methodDescriptor_QueueService_ChangeSongPosition,
      callback);
};


/**
 * @param {!proto.queue.ChangeSongPositionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.queue.ChangeSongPositionResponse>}
 *     Promise that resolves to the response
 */
proto.queue.QueueServicePromiseClient.prototype.changeSongPosition =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/queue.QueueService/ChangeSongPosition',
      request,
      metadata || {},
      methodDescriptor_QueueService_ChangeSongPosition);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.queue.TimeStampRequest,
 *   !proto.queue.TimeStampResponse>}
 */
const methodDescriptor_QueueService_TimeStamp = new grpc.web.MethodDescriptor(
  '/queue.QueueService/TimeStamp',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.queue.TimeStampRequest,
  proto.queue.TimeStampResponse,
  /**
   * @param {!proto.queue.TimeStampRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.queue.TimeStampResponse.deserializeBinary
);


/**
 * @param {!proto.queue.TimeStampRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.queue.TimeStampResponse>}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServiceClient.prototype.timeStamp =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/queue.QueueService/TimeStamp',
      request,
      metadata || {},
      methodDescriptor_QueueService_TimeStamp);
};


/**
 * @param {!proto.queue.TimeStampRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.queue.TimeStampResponse>}
 *     The XHR Node Readable Stream
 */
proto.queue.QueueServicePromiseClient.prototype.timeStamp =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/queue.QueueService/TimeStamp',
      request,
      metadata || {},
      methodDescriptor_QueueService_TimeStamp);
};


module.exports = proto.queue;

