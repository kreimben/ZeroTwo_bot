// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "play.proto" (package "play", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message play.PlayRequest
 */
export interface PlayRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string play_url = 3;
     */
    playUrl: string; // youtube link.
}
/**
 * @generated from protobuf message play.PlayResponse
 */
export interface PlayResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string; // result message.
}
/**
 * @generated from protobuf message play.SearchRequest
 */
export interface SearchRequest {
    /**
     * @generated from protobuf oneof: search_type
     */
    searchType: {
        oneofKind: "keyword";
        /**
         * @generated from protobuf field: string keyword = 1;
         */
        keyword: string; // If input keyword and url both, url will be ignored.
    } | {
        oneofKind: "url";
        /**
         * @generated from protobuf field: string url = 2;
         */
        url: string; // that doesn't mean I can play that link directly. because it's searching with url.
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: uint32 amount = 3;
     */
    amount: number; // amount of results.
}
/**
 * @generated from protobuf message play.SearchResponse
 */
export interface SearchResponse {
    /**
     * @generated from protobuf field: repeated play.VideoInfo VideoInfo = 1 [json_name = "VideoInfo"];
     */
    videoInfo: VideoInfo[]; // results.
}
/**
 * @generated from protobuf message play.VideoInfo
 */
export interface VideoInfo {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string; // youtube url that can be directed to youtube.
    /**
     * @generated from protobuf field: string thumbnail_url = 3;
     */
    thumbnailUrl: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 4;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message play.PauseRequest
 */
export interface PauseRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message play.PauseResponse
 */
export interface PauseResponse {
    /**
     * @generated from protobuf field: bool is_repeat = 1;
     */
    isRepeat: boolean;
}
/**
 * @generated from protobuf message play.ResumeRequest
 */
export interface ResumeRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message play.ResumeResponse
 */
export interface ResumeResponse {
    /**
     * @generated from protobuf field: bool is_repeat = 1;
     */
    isRepeat: boolean;
}
/**
 * @generated from protobuf message play.StopRequest
 */
export interface StopRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message play.StopResponse
 */
export interface StopResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayRequest$Type extends MessageType<PlayRequest> {
    constructor() {
        super("play.PlayRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "play_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayRequest>): PlayRequest {
        const message = { guildId: "", userId: "", playUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayRequest): PlayRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string play_url */ 3:
                    message.playUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string play_url = 3; */
        if (message.playUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.playUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.PlayRequest
 */
export const PlayRequest = new PlayRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayResponse$Type extends MessageType<PlayResponse> {
    constructor() {
        super("play.PlayResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayResponse>): PlayResponse {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayResponse): PlayResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.PlayResponse
 */
export const PlayResponse = new PlayResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends MessageType<SearchRequest> {
    constructor() {
        super("play.SearchRequest", [
            { no: 1, name: "keyword", kind: "scalar", oneof: "searchType", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", oneof: "searchType", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchRequest>): SearchRequest {
        const message = { searchType: { oneofKind: undefined }, amount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchRequest): SearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string keyword */ 1:
                    message.searchType = {
                        oneofKind: "keyword",
                        keyword: reader.string()
                    };
                    break;
                case /* string url */ 2:
                    message.searchType = {
                        oneofKind: "url",
                        url: reader.string()
                    };
                    break;
                case /* uint32 amount */ 3:
                    message.amount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string keyword = 1; */
        if (message.searchType.oneofKind === "keyword")
            writer.tag(1, WireType.LengthDelimited).string(message.searchType.keyword);
        /* string url = 2; */
        if (message.searchType.oneofKind === "url")
            writer.tag(2, WireType.LengthDelimited).string(message.searchType.url);
        /* uint32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.SearchRequest
 */
export const SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchResponse$Type extends MessageType<SearchResponse> {
    constructor() {
        super("play.SearchResponse", [
            { no: 1, name: "VideoInfo", kind: "message", jsonName: "VideoInfo", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoInfo }
        ]);
    }
    create(value?: PartialMessage<SearchResponse>): SearchResponse {
        const message = { videoInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchResponse): SearchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated play.VideoInfo VideoInfo = 1 [json_name = "VideoInfo"];*/ 1:
                    message.videoInfo.push(VideoInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated play.VideoInfo VideoInfo = 1 [json_name = "VideoInfo"]; */
        for (let i = 0; i < message.videoInfo.length; i++)
            VideoInfo.internalBinaryWrite(message.videoInfo[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.SearchResponse
 */
export const SearchResponse = new SearchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoInfo$Type extends MessageType<VideoInfo> {
    constructor() {
        super("play.VideoInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "thumbnail_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<VideoInfo>): VideoInfo {
        const message = { title: "", url: "", thumbnailUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoInfo): VideoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string thumbnail_url */ 3:
                    message.thumbnailUrl = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 4:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string thumbnail_url = 3; */
        if (message.thumbnailUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thumbnailUrl);
        /* google.protobuf.Duration duration = 4; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.VideoInfo
 */
export const VideoInfo = new VideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PauseRequest$Type extends MessageType<PauseRequest> {
    constructor() {
        super("play.PauseRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PauseRequest>): PauseRequest {
        const message = { guildId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PauseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PauseRequest): PauseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PauseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.PauseRequest
 */
export const PauseRequest = new PauseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PauseResponse$Type extends MessageType<PauseResponse> {
    constructor() {
        super("play.PauseResponse", [
            { no: 1, name: "is_repeat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PauseResponse>): PauseResponse {
        const message = { isRepeat: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PauseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PauseResponse): PauseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_repeat */ 1:
                    message.isRepeat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PauseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_repeat = 1; */
        if (message.isRepeat !== false)
            writer.tag(1, WireType.Varint).bool(message.isRepeat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.PauseResponse
 */
export const PauseResponse = new PauseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeRequest$Type extends MessageType<ResumeRequest> {
    constructor() {
        super("play.ResumeRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResumeRequest>): ResumeRequest {
        const message = { guildId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResumeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResumeRequest): ResumeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResumeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.ResumeRequest
 */
export const ResumeRequest = new ResumeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeResponse$Type extends MessageType<ResumeResponse> {
    constructor() {
        super("play.ResumeResponse", [
            { no: 1, name: "is_repeat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResumeResponse>): ResumeResponse {
        const message = { isRepeat: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResumeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResumeResponse): ResumeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_repeat */ 1:
                    message.isRepeat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResumeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_repeat = 1; */
        if (message.isRepeat !== false)
            writer.tag(1, WireType.Varint).bool(message.isRepeat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.ResumeResponse
 */
export const ResumeResponse = new ResumeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopRequest$Type extends MessageType<StopRequest> {
    constructor() {
        super("play.StopRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopRequest>): StopRequest {
        const message = { guildId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopRequest): StopRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.StopRequest
 */
export const StopRequest = new StopRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopResponse$Type extends MessageType<StopResponse> {
    constructor() {
        super("play.StopResponse", []);
    }
    create(value?: PartialMessage<StopResponse>): StopResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopResponse): StopResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message play.StopResponse
 */
export const StopResponse = new StopResponse$Type();
/**
 * @generated ServiceType for protobuf service play.PlayService
 */
export const PlayService = new ServiceType("play.PlayService", [
    { name: "Search", options: {}, I: SearchRequest, O: SearchResponse },
    { name: "Play", options: {}, I: PlayRequest, O: PlayResponse },
    { name: "Pause", options: {}, I: PauseRequest, O: PauseResponse },
    { name: "Resume", options: {}, I: ResumeRequest, O: ResumeResponse },
    { name: "Stop", options: {}, I: StopRequest, O: StopResponse }
]);
