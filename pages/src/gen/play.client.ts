// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "play.proto" (package "play", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PlayService } from "./play";
import type { StopResponse } from "./play";
import type { StopRequest } from "./play";
import type { ResumeResponse } from "./play";
import type { ResumeRequest } from "./play";
import type { PauseResponse } from "./play";
import type { PauseRequest } from "./play";
import type { PlayResponse } from "./play";
import type { PlayRequest } from "./play";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SearchResponse } from "./play";
import type { SearchRequest } from "./play";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service play.PlayService
 */
export interface IPlayServiceClient {
    /**
     * @generated from protobuf rpc: Search(play.SearchRequest) returns (play.SearchResponse);
     */
    search(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, SearchResponse>;
    /**
     * @generated from protobuf rpc: Play(play.PlayRequest) returns (play.PlayResponse);
     */
    play(input: PlayRequest, options?: RpcOptions): UnaryCall<PlayRequest, PlayResponse>;
    /**
     * @generated from protobuf rpc: Pause(play.PauseRequest) returns (play.PauseResponse);
     */
    pause(input: PauseRequest, options?: RpcOptions): UnaryCall<PauseRequest, PauseResponse>;
    /**
     * @generated from protobuf rpc: Resume(play.ResumeRequest) returns (play.ResumeResponse);
     */
    resume(input: ResumeRequest, options?: RpcOptions): UnaryCall<ResumeRequest, ResumeResponse>;
    /**
     * @generated from protobuf rpc: Stop(play.StopRequest) returns (play.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
}
/**
 * @generated from protobuf service play.PlayService
 */
export class PlayServiceClient implements IPlayServiceClient, ServiceInfo {
    typeName = PlayService.typeName;
    methods = PlayService.methods;
    options = PlayService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Search(play.SearchRequest) returns (play.SearchResponse);
     */
    search(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, SearchResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchRequest, SearchResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Play(play.PlayRequest) returns (play.PlayResponse);
     */
    play(input: PlayRequest, options?: RpcOptions): UnaryCall<PlayRequest, PlayResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlayRequest, PlayResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Pause(play.PauseRequest) returns (play.PauseResponse);
     */
    pause(input: PauseRequest, options?: RpcOptions): UnaryCall<PauseRequest, PauseResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PauseRequest, PauseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Resume(play.ResumeRequest) returns (play.ResumeResponse);
     */
    resume(input: ResumeRequest, options?: RpcOptions): UnaryCall<ResumeRequest, ResumeResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResumeRequest, ResumeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Stop(play.StopRequest) returns (play.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopRequest, StopResponse>("unary", this._transport, method, opt, input);
    }
}
