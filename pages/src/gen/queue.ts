// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "queue.proto" (package "queue", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message queue.CurrentQueueRequest
 */
export interface CurrentQueueRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message queue.CurrentQueueResponse
 */
export interface CurrentQueueResponse {
    /**
     * @generated from protobuf field: queue.Song current_song = 1;
     */
    currentSong?: Song; // current song playing
    /**
     * @generated from protobuf field: repeated queue.Song songs = 2;
     */
    songs: Song[]; // songs in queue WITHOUT current song.
    /**
     * @generated from protobuf field: uint32 length = 3;
     */
    length: number; // length of queue.
    /**
     * @generated from protobuf field: uint32 timestamp = 4;
     */
    timestamp: number; // timestamp of current song in seconds.
}
/**
 * @generated from protobuf message queue.Song
 */
export interface Song {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string; // youtube url that can be directed to youtube.
    /**
     * @generated from protobuf field: string thumbnail_url = 3;
     */
    thumbnailUrl: string;
    /**
     * @generated from protobuf field: uint32 duration = 4;
     */
    duration: number; // in seconds
    /**
     * @generated from protobuf field: string applicant = 5;
     */
    applicant: string;
    /**
     * @generated from protobuf field: uint32 position = 6;
     */
    position: number; // position in queue.
    /**
     * @generated from protobuf field: bool is_repeat = 7;
     */
    isRepeat: boolean; // indicates if this song is repeated and useless to songs in queue.
}
/**
 * @generated from protobuf message queue.RemoveSongRequest
 */
export interface RemoveSongRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: uint32 song_index = 3;
     */
    songIndex: number; // 1 to songs.length - 1 cuz 0 is current playing song.
}
/**
 * @generated from protobuf message queue.RemoveSongResponse
 */
export interface RemoveSongResponse {
}
/**
 * @generated from protobuf message queue.SkipSongRequest
 */
export interface SkipSongRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: uint32 song_index = 3;
     */
    songIndex: number; // 1 to songs.length - 1 cuz 0 is current playing song.
}
/**
 * @generated from protobuf message queue.SkipSongResponse
 */
export interface SkipSongResponse {
}
/**
 * *
 * Only repeat current playing song.
 * If there is no song playing, return false.
 *
 * @generated from protobuf message queue.RepeatSongRequest
 */
export interface RepeatSongRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message queue.RepeatSongResponse
 */
export interface RepeatSongResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean; // indicates if to set repeat or not.
}
/**
 * *
 * Change song position in queue.
 * Basically no different with ChangeSongPosition.
 *
 * @generated from protobuf message queue.ShuffleQueueRequest
 */
export interface ShuffleQueueRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message queue.ShuffleQueueResponse
 */
export interface ShuffleQueueResponse {
}
/**
 * @generated from protobuf message queue.ChangeSongPositionRequest
 */
export interface ChangeSongPositionRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: repeated uint32 song_positions = 3;
     */
    songPositions: number[]; // Only adjust to rest of queue. Not affect to current playing song.
}
/**
 * @generated from protobuf message queue.ChangeSongPositionResponse
 */
export interface ChangeSongPositionResponse {
}
/**
 * @generated from protobuf message queue.TimeStampRequest
 */
export interface TimeStampRequest {
    /**
     * @generated from protobuf field: string guild_id = 1;
     */
    guildId: string;
}
/**
 * @generated from protobuf message queue.TimeStampResponse
 */
export interface TimeStampResponse {
    /**
     * @generated from protobuf field: uint32 timestamp = 1;
     */
    timestamp: number; // current playing in seconds.
    /**
     * @generated from protobuf field: uint32 duration = 2;
     */
    duration: number; // current playing song's duration in seconds.
}
// @generated message type with reflection information, may provide speed optimized methods
class CurrentQueueRequest$Type extends MessageType<CurrentQueueRequest> {
    constructor() {
        super("queue.CurrentQueueRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CurrentQueueRequest>): CurrentQueueRequest {
        const message = { guildId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CurrentQueueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CurrentQueueRequest): CurrentQueueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CurrentQueueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.CurrentQueueRequest
 */
export const CurrentQueueRequest = new CurrentQueueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurrentQueueResponse$Type extends MessageType<CurrentQueueResponse> {
    constructor() {
        super("queue.CurrentQueueResponse", [
            { no: 1, name: "current_song", kind: "message", T: () => Song },
            { no: 2, name: "songs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Song },
            { no: 3, name: "length", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CurrentQueueResponse>): CurrentQueueResponse {
        const message = { songs: [], length: 0, timestamp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CurrentQueueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CurrentQueueResponse): CurrentQueueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* queue.Song current_song */ 1:
                    message.currentSong = Song.internalBinaryRead(reader, reader.uint32(), options, message.currentSong);
                    break;
                case /* repeated queue.Song songs */ 2:
                    message.songs.push(Song.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 length */ 3:
                    message.length = reader.uint32();
                    break;
                case /* uint32 timestamp */ 4:
                    message.timestamp = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CurrentQueueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* queue.Song current_song = 1; */
        if (message.currentSong)
            Song.internalBinaryWrite(message.currentSong, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated queue.Song songs = 2; */
        for (let i = 0; i < message.songs.length; i++)
            Song.internalBinaryWrite(message.songs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 length = 3; */
        if (message.length !== 0)
            writer.tag(3, WireType.Varint).uint32(message.length);
        /* uint32 timestamp = 4; */
        if (message.timestamp !== 0)
            writer.tag(4, WireType.Varint).uint32(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.CurrentQueueResponse
 */
export const CurrentQueueResponse = new CurrentQueueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Song$Type extends MessageType<Song> {
    constructor() {
        super("queue.Song", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "thumbnail_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "duration", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "applicant", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "position", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_repeat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Song>): Song {
        const message = { title: "", url: "", thumbnailUrl: "", duration: 0, applicant: "", position: 0, isRepeat: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Song>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Song): Song {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string thumbnail_url */ 3:
                    message.thumbnailUrl = reader.string();
                    break;
                case /* uint32 duration */ 4:
                    message.duration = reader.uint32();
                    break;
                case /* string applicant */ 5:
                    message.applicant = reader.string();
                    break;
                case /* uint32 position */ 6:
                    message.position = reader.uint32();
                    break;
                case /* bool is_repeat */ 7:
                    message.isRepeat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Song, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string thumbnail_url = 3; */
        if (message.thumbnailUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thumbnailUrl);
        /* uint32 duration = 4; */
        if (message.duration !== 0)
            writer.tag(4, WireType.Varint).uint32(message.duration);
        /* string applicant = 5; */
        if (message.applicant !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.applicant);
        /* uint32 position = 6; */
        if (message.position !== 0)
            writer.tag(6, WireType.Varint).uint32(message.position);
        /* bool is_repeat = 7; */
        if (message.isRepeat !== false)
            writer.tag(7, WireType.Varint).bool(message.isRepeat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.Song
 */
export const Song = new Song$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveSongRequest$Type extends MessageType<RemoveSongRequest> {
    constructor() {
        super("queue.RemoveSongRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "song_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveSongRequest>): RemoveSongRequest {
        const message = { guildId: "", userId: "", songIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveSongRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveSongRequest): RemoveSongRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* uint32 song_index */ 3:
                    message.songIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveSongRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* uint32 song_index = 3; */
        if (message.songIndex !== 0)
            writer.tag(3, WireType.Varint).uint32(message.songIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.RemoveSongRequest
 */
export const RemoveSongRequest = new RemoveSongRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveSongResponse$Type extends MessageType<RemoveSongResponse> {
    constructor() {
        super("queue.RemoveSongResponse", []);
    }
    create(value?: PartialMessage<RemoveSongResponse>): RemoveSongResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveSongResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveSongResponse): RemoveSongResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RemoveSongResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.RemoveSongResponse
 */
export const RemoveSongResponse = new RemoveSongResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkipSongRequest$Type extends MessageType<SkipSongRequest> {
    constructor() {
        super("queue.SkipSongRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "song_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SkipSongRequest>): SkipSongRequest {
        const message = { guildId: "", userId: "", songIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkipSongRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkipSongRequest): SkipSongRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* uint32 song_index */ 3:
                    message.songIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkipSongRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* uint32 song_index = 3; */
        if (message.songIndex !== 0)
            writer.tag(3, WireType.Varint).uint32(message.songIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.SkipSongRequest
 */
export const SkipSongRequest = new SkipSongRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkipSongResponse$Type extends MessageType<SkipSongResponse> {
    constructor() {
        super("queue.SkipSongResponse", []);
    }
    create(value?: PartialMessage<SkipSongResponse>): SkipSongResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkipSongResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkipSongResponse): SkipSongResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SkipSongResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.SkipSongResponse
 */
export const SkipSongResponse = new SkipSongResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepeatSongRequest$Type extends MessageType<RepeatSongRequest> {
    constructor() {
        super("queue.RepeatSongRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RepeatSongRequest>): RepeatSongRequest {
        const message = { guildId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RepeatSongRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepeatSongRequest): RepeatSongRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RepeatSongRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.RepeatSongRequest
 */
export const RepeatSongRequest = new RepeatSongRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepeatSongResponse$Type extends MessageType<RepeatSongResponse> {
    constructor() {
        super("queue.RepeatSongResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RepeatSongResponse>): RepeatSongResponse {
        const message = { result: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RepeatSongResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepeatSongResponse): RepeatSongResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RepeatSongResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.RepeatSongResponse
 */
export const RepeatSongResponse = new RepeatSongResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShuffleQueueRequest$Type extends MessageType<ShuffleQueueRequest> {
    constructor() {
        super("queue.ShuffleQueueRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShuffleQueueRequest>): ShuffleQueueRequest {
        const message = { guildId: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShuffleQueueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShuffleQueueRequest): ShuffleQueueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShuffleQueueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.ShuffleQueueRequest
 */
export const ShuffleQueueRequest = new ShuffleQueueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShuffleQueueResponse$Type extends MessageType<ShuffleQueueResponse> {
    constructor() {
        super("queue.ShuffleQueueResponse", []);
    }
    create(value?: PartialMessage<ShuffleQueueResponse>): ShuffleQueueResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShuffleQueueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShuffleQueueResponse): ShuffleQueueResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShuffleQueueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.ShuffleQueueResponse
 */
export const ShuffleQueueResponse = new ShuffleQueueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeSongPositionRequest$Type extends MessageType<ChangeSongPositionRequest> {
    constructor() {
        super("queue.ChangeSongPositionRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "song_positions", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeSongPositionRequest>): ChangeSongPositionRequest {
        const message = { guildId: "", userId: "", songPositions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeSongPositionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeSongPositionRequest): ChangeSongPositionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* repeated uint32 song_positions */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.songPositions.push(reader.uint32());
                    else
                        message.songPositions.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeSongPositionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* repeated uint32 song_positions = 3; */
        if (message.songPositions.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.songPositions.length; i++)
                writer.uint32(message.songPositions[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.ChangeSongPositionRequest
 */
export const ChangeSongPositionRequest = new ChangeSongPositionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeSongPositionResponse$Type extends MessageType<ChangeSongPositionResponse> {
    constructor() {
        super("queue.ChangeSongPositionResponse", []);
    }
    create(value?: PartialMessage<ChangeSongPositionResponse>): ChangeSongPositionResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeSongPositionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeSongPositionResponse): ChangeSongPositionResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChangeSongPositionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.ChangeSongPositionResponse
 */
export const ChangeSongPositionResponse = new ChangeSongPositionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeStampRequest$Type extends MessageType<TimeStampRequest> {
    constructor() {
        super("queue.TimeStampRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TimeStampRequest>): TimeStampRequest {
        const message = { guildId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TimeStampRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeStampRequest): TimeStampRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string guild_id */ 1:
                    message.guildId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeStampRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string guild_id = 1; */
        if (message.guildId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.guildId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.TimeStampRequest
 */
export const TimeStampRequest = new TimeStampRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeStampResponse$Type extends MessageType<TimeStampResponse> {
    constructor() {
        super("queue.TimeStampResponse", [
            { no: 1, name: "timestamp", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "duration", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TimeStampResponse>): TimeStampResponse {
        const message = { timestamp: 0, duration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TimeStampResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeStampResponse): TimeStampResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 timestamp */ 1:
                    message.timestamp = reader.uint32();
                    break;
                case /* uint32 duration */ 2:
                    message.duration = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeStampResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 timestamp = 1; */
        if (message.timestamp !== 0)
            writer.tag(1, WireType.Varint).uint32(message.timestamp);
        /* uint32 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).uint32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message queue.TimeStampResponse
 */
export const TimeStampResponse = new TimeStampResponse$Type();
/**
 * @generated ServiceType for protobuf service queue.QueueService
 */
export const QueueService = new ServiceType("queue.QueueService", [
    { name: "CurrentQueue", serverStreaming: true, options: {}, I: CurrentQueueRequest, O: CurrentQueueResponse },
    { name: "RemoveSong", options: {}, I: RemoveSongRequest, O: RemoveSongResponse },
    { name: "SkipSong", options: {}, I: SkipSongRequest, O: SkipSongResponse },
    { name: "RepeatSong", options: {}, I: RepeatSongRequest, O: RepeatSongResponse },
    { name: "ShuffleQueue", options: {}, I: ShuffleQueueRequest, O: ShuffleQueueResponse },
    { name: "ChangeSongPosition", options: {}, I: ChangeSongPositionRequest, O: ChangeSongPositionResponse },
    { name: "TimeStamp", serverStreaming: true, options: {}, I: TimeStampRequest, O: TimeStampResponse }
]);
