/**
 * @fileoverview gRPC-Web generated client stub for discord
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.discord = require('./auth_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.discord.DiscordClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.discord.DiscordPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.discord.GetOAuthUrlRequest,
 *   !proto.discord.GetOAuthUrlResponse>}
 */
const methodDescriptor_Discord_GetOAuthUrl = new grpc.web.MethodDescriptor(
  '/discord.Discord/GetOAuthUrl',
  grpc.web.MethodType.UNARY,
  proto.discord.GetOAuthUrlRequest,
  proto.discord.GetOAuthUrlResponse,
  /**
   * @param {!proto.discord.GetOAuthUrlRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.discord.GetOAuthUrlResponse.deserializeBinary
);


/**
 * @param {!proto.discord.GetOAuthUrlRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.discord.GetOAuthUrlResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.discord.GetOAuthUrlResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.discord.DiscordClient.prototype.getOAuthUrl =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/discord.Discord/GetOAuthUrl',
      request,
      metadata || {},
      methodDescriptor_Discord_GetOAuthUrl,
      callback);
};


/**
 * @param {!proto.discord.GetOAuthUrlRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.discord.GetOAuthUrlResponse>}
 *     Promise that resolves to the response
 */
proto.discord.DiscordPromiseClient.prototype.getOAuthUrl =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/discord.Discord/GetOAuthUrl',
      request,
      metadata || {},
      methodDescriptor_Discord_GetOAuthUrl);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.discord.LoginWithDiscordRequest,
 *   !proto.discord.LoginWithDiscordResponse>}
 */
const methodDescriptor_Discord_LoginWithDiscord = new grpc.web.MethodDescriptor(
  '/discord.Discord/LoginWithDiscord',
  grpc.web.MethodType.UNARY,
  proto.discord.LoginWithDiscordRequest,
  proto.discord.LoginWithDiscordResponse,
  /**
   * @param {!proto.discord.LoginWithDiscordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.discord.LoginWithDiscordResponse.deserializeBinary
);


/**
 * @param {!proto.discord.LoginWithDiscordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.discord.LoginWithDiscordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.discord.LoginWithDiscordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.discord.DiscordClient.prototype.loginWithDiscord =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/discord.Discord/LoginWithDiscord',
      request,
      metadata || {},
      methodDescriptor_Discord_LoginWithDiscord,
      callback);
};


/**
 * @param {!proto.discord.LoginWithDiscordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.discord.LoginWithDiscordResponse>}
 *     Promise that resolves to the response
 */
proto.discord.DiscordPromiseClient.prototype.loginWithDiscord =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/discord.Discord/LoginWithDiscord',
      request,
      metadata || {},
      methodDescriptor_Discord_LoginWithDiscord);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.discord.RefreshAccessTokenRequest,
 *   !proto.discord.LoginWithDiscordResponse>}
 */
const methodDescriptor_Discord_RefreshAccessToken = new grpc.web.MethodDescriptor(
  '/discord.Discord/RefreshAccessToken',
  grpc.web.MethodType.UNARY,
  proto.discord.RefreshAccessTokenRequest,
  proto.discord.LoginWithDiscordResponse,
  /**
   * @param {!proto.discord.RefreshAccessTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.discord.LoginWithDiscordResponse.deserializeBinary
);


/**
 * @param {!proto.discord.RefreshAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.discord.LoginWithDiscordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.discord.LoginWithDiscordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.discord.DiscordClient.prototype.refreshAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/discord.Discord/RefreshAccessToken',
      request,
      metadata || {},
      methodDescriptor_Discord_RefreshAccessToken,
      callback);
};


/**
 * @param {!proto.discord.RefreshAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.discord.LoginWithDiscordResponse>}
 *     Promise that resolves to the response
 */
proto.discord.DiscordPromiseClient.prototype.refreshAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/discord.Discord/RefreshAccessToken',
      request,
      metadata || {},
      methodDescriptor_Discord_RefreshAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.discord.GetMyInfoRequest,
 *   !proto.discord.GetMyInfoResponse>}
 */
const methodDescriptor_Discord_GetMyInfo = new grpc.web.MethodDescriptor(
  '/discord.Discord/GetMyInfo',
  grpc.web.MethodType.UNARY,
  proto.discord.GetMyInfoRequest,
  proto.discord.GetMyInfoResponse,
  /**
   * @param {!proto.discord.GetMyInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.discord.GetMyInfoResponse.deserializeBinary
);


/**
 * @param {!proto.discord.GetMyInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.discord.GetMyInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.discord.GetMyInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.discord.DiscordClient.prototype.getMyInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/discord.Discord/GetMyInfo',
      request,
      metadata || {},
      methodDescriptor_Discord_GetMyInfo,
      callback);
};


/**
 * @param {!proto.discord.GetMyInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.discord.GetMyInfoResponse>}
 *     Promise that resolves to the response
 */
proto.discord.DiscordPromiseClient.prototype.getMyInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/discord.Discord/GetMyInfo',
      request,
      metadata || {},
      methodDescriptor_Discord_GetMyInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.discord.ValidateGuildIdRequest,
 *   !proto.discord.ValidateGuildIdResponse>}
 */
const methodDescriptor_Discord_ValidateGuildId = new grpc.web.MethodDescriptor(
  '/discord.Discord/ValidateGuildId',
  grpc.web.MethodType.UNARY,
  proto.discord.ValidateGuildIdRequest,
  proto.discord.ValidateGuildIdResponse,
  /**
   * @param {!proto.discord.ValidateGuildIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.discord.ValidateGuildIdResponse.deserializeBinary
);


/**
 * @param {!proto.discord.ValidateGuildIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.discord.ValidateGuildIdResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.discord.ValidateGuildIdResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.discord.DiscordClient.prototype.validateGuildId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/discord.Discord/ValidateGuildId',
      request,
      metadata || {},
      methodDescriptor_Discord_ValidateGuildId,
      callback);
};


/**
 * @param {!proto.discord.ValidateGuildIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.discord.ValidateGuildIdResponse>}
 *     Promise that resolves to the response
 */
proto.discord.DiscordPromiseClient.prototype.validateGuildId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/discord.Discord/ValidateGuildId',
      request,
      metadata || {},
      methodDescriptor_Discord_ValidateGuildId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.discord.ValidateUserIdRequest,
 *   !proto.discord.ValidateUserIdResponse>}
 */
const methodDescriptor_Discord_ValidateUserId = new grpc.web.MethodDescriptor(
  '/discord.Discord/ValidateUserId',
  grpc.web.MethodType.UNARY,
  proto.discord.ValidateUserIdRequest,
  proto.discord.ValidateUserIdResponse,
  /**
   * @param {!proto.discord.ValidateUserIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.discord.ValidateUserIdResponse.deserializeBinary
);


/**
 * @param {!proto.discord.ValidateUserIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.discord.ValidateUserIdResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.discord.ValidateUserIdResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.discord.DiscordClient.prototype.validateUserId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/discord.Discord/ValidateUserId',
      request,
      metadata || {},
      methodDescriptor_Discord_ValidateUserId,
      callback);
};


/**
 * @param {!proto.discord.ValidateUserIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.discord.ValidateUserIdResponse>}
 *     Promise that resolves to the response
 */
proto.discord.DiscordPromiseClient.prototype.validateUserId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/discord.Discord/ValidateUserId',
      request,
      metadata || {},
      methodDescriptor_Discord_ValidateUserId);
};


module.exports = proto.discord;

