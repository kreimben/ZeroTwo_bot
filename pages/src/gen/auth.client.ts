// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "auth.proto" (package "discord", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Discord } from "./auth";
import type { ValidateUserIdResponse } from "./auth";
import type { ValidateUserIdRequest } from "./auth";
import type { ValidateGuildIdResponse } from "./auth";
import type { ValidateGuildIdRequest } from "./auth";
import type { GetMyInfoResponse } from "./auth";
import type { GetMyInfoRequest } from "./auth";
import type { RefreshAccessTokenRequest } from "./auth";
import type { LoginWithDiscordResponse } from "./auth";
import type { LoginWithDiscordRequest } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetOAuthUrlResponse } from "./auth";
import type { GetOAuthUrlRequest } from "./auth";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service discord.Discord
 */
export interface IDiscordClient {
    /**
     * @generated from protobuf rpc: GetOAuthUrl(discord.GetOAuthUrlRequest) returns (discord.GetOAuthUrlResponse);
     */
    getOAuthUrl(input: GetOAuthUrlRequest, options?: RpcOptions): UnaryCall<GetOAuthUrlRequest, GetOAuthUrlResponse>;
    /**
     * @generated from protobuf rpc: LoginWithDiscord(discord.LoginWithDiscordRequest) returns (discord.LoginWithDiscordResponse);
     */
    loginWithDiscord(input: LoginWithDiscordRequest, options?: RpcOptions): UnaryCall<LoginWithDiscordRequest, LoginWithDiscordResponse>;
    /**
     * @generated from protobuf rpc: RefreshAccessToken(discord.RefreshAccessTokenRequest) returns (discord.LoginWithDiscordResponse);
     */
    refreshAccessToken(input: RefreshAccessTokenRequest, options?: RpcOptions): UnaryCall<RefreshAccessTokenRequest, LoginWithDiscordResponse>;
    /**
     * @generated from protobuf rpc: GetMyInfo(discord.GetMyInfoRequest) returns (discord.GetMyInfoResponse);
     */
    getMyInfo(input: GetMyInfoRequest, options?: RpcOptions): UnaryCall<GetMyInfoRequest, GetMyInfoResponse>;
    /**
     * @generated from protobuf rpc: ValidateGuildId(discord.ValidateGuildIdRequest) returns (discord.ValidateGuildIdResponse);
     */
    validateGuildId(input: ValidateGuildIdRequest, options?: RpcOptions): UnaryCall<ValidateGuildIdRequest, ValidateGuildIdResponse>;
    /**
     * @generated from protobuf rpc: ValidateUserId(discord.ValidateUserIdRequest) returns (discord.ValidateUserIdResponse);
     */
    validateUserId(input: ValidateUserIdRequest, options?: RpcOptions): UnaryCall<ValidateUserIdRequest, ValidateUserIdResponse>;
}
/**
 * @generated from protobuf service discord.Discord
 */
export class DiscordClient implements IDiscordClient, ServiceInfo {
    typeName = Discord.typeName;
    methods = Discord.methods;
    options = Discord.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetOAuthUrl(discord.GetOAuthUrlRequest) returns (discord.GetOAuthUrlResponse);
     */
    getOAuthUrl(input: GetOAuthUrlRequest, options?: RpcOptions): UnaryCall<GetOAuthUrlRequest, GetOAuthUrlResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOAuthUrlRequest, GetOAuthUrlResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LoginWithDiscord(discord.LoginWithDiscordRequest) returns (discord.LoginWithDiscordResponse);
     */
    loginWithDiscord(input: LoginWithDiscordRequest, options?: RpcOptions): UnaryCall<LoginWithDiscordRequest, LoginWithDiscordResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginWithDiscordRequest, LoginWithDiscordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RefreshAccessToken(discord.RefreshAccessTokenRequest) returns (discord.LoginWithDiscordResponse);
     */
    refreshAccessToken(input: RefreshAccessTokenRequest, options?: RpcOptions): UnaryCall<RefreshAccessTokenRequest, LoginWithDiscordResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshAccessTokenRequest, LoginWithDiscordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMyInfo(discord.GetMyInfoRequest) returns (discord.GetMyInfoResponse);
     */
    getMyInfo(input: GetMyInfoRequest, options?: RpcOptions): UnaryCall<GetMyInfoRequest, GetMyInfoResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMyInfoRequest, GetMyInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ValidateGuildId(discord.ValidateGuildIdRequest) returns (discord.ValidateGuildIdResponse);
     */
    validateGuildId(input: ValidateGuildIdRequest, options?: RpcOptions): UnaryCall<ValidateGuildIdRequest, ValidateGuildIdResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ValidateGuildIdRequest, ValidateGuildIdResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ValidateUserId(discord.ValidateUserIdRequest) returns (discord.ValidateUserIdResponse);
     */
    validateUserId(input: ValidateUserIdRequest, options?: RpcOptions): UnaryCall<ValidateUserIdRequest, ValidateUserIdResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ValidateUserIdRequest, ValidateUserIdResponse>("unary", this._transport, method, opt, input);
    }
}
