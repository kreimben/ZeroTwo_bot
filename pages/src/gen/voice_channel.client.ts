// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "voice_channel.proto" (package "queue", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VoiceChannelService } from "./voice_channel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { WhereAmIResponse } from "./voice_channel";
import type { WhereAmIRequest } from "./voice_channel";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * *
 * VoiceChannelService is the service that handles voice channel related requests.
 * It is used to track where a user is in the voice channel.
 *
 * @generated from protobuf service queue.VoiceChannelService
 */
export interface IVoiceChannelServiceClient {
    /**
     * response whenever the user changes channel.
     * Client should use this rpc to update the user's current channel per 5 seconds.
     * If the user is not in a voice channel, the response will return `NotFound` code.
     *
     * @generated from protobuf rpc: WhereAmI(queue.WhereAmIRequest) returns (stream queue.WhereAmIResponse);
     */
    whereAmI(input: WhereAmIRequest, options?: RpcOptions): ServerStreamingCall<WhereAmIRequest, WhereAmIResponse>;
}
/**
 * *
 * VoiceChannelService is the service that handles voice channel related requests.
 * It is used to track where a user is in the voice channel.
 *
 * @generated from protobuf service queue.VoiceChannelService
 */
export class VoiceChannelServiceClient implements IVoiceChannelServiceClient, ServiceInfo {
    typeName = VoiceChannelService.typeName;
    methods = VoiceChannelService.methods;
    options = VoiceChannelService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * response whenever the user changes channel.
     * Client should use this rpc to update the user's current channel per 5 seconds.
     * If the user is not in a voice channel, the response will return `NotFound` code.
     *
     * @generated from protobuf rpc: WhereAmI(queue.WhereAmIRequest) returns (stream queue.WhereAmIResponse);
     */
    whereAmI(input: WhereAmIRequest, options?: RpcOptions): ServerStreamingCall<WhereAmIRequest, WhereAmIResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<WhereAmIRequest, WhereAmIResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
