// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: auth.proto

package protobuf_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Discord_GetOAuthUrl_FullMethodName        = "/discord.Discord/GetOAuthUrl"
	Discord_LoginWithDiscord_FullMethodName   = "/discord.Discord/LoginWithDiscord"
	Discord_RefreshAccessToken_FullMethodName = "/discord.Discord/RefreshAccessToken"
	Discord_GetMyInfo_FullMethodName          = "/discord.Discord/GetMyInfo"
	Discord_ValidateGuildId_FullMethodName    = "/discord.Discord/ValidateGuildId"
	Discord_ValidateUserId_FullMethodName     = "/discord.Discord/ValidateUserId"
)

// DiscordClient is the client API for Discord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordClient interface {
	GetOAuthUrl(ctx context.Context, in *GetOAuthUrlRequest, opts ...grpc.CallOption) (*GetOAuthUrlResponse, error)
	LoginWithDiscord(ctx context.Context, in *LoginWithDiscordRequest, opts ...grpc.CallOption) (*LoginWithDiscordResponse, error)
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*LoginWithDiscordResponse, error)
	GetMyInfo(ctx context.Context, in *GetMyInfoRequest, opts ...grpc.CallOption) (*GetMyInfoResponse, error)
	ValidateGuildId(ctx context.Context, in *ValidateGuildIdRequest, opts ...grpc.CallOption) (*ValidateGuildIdResponse, error)
	ValidateUserId(ctx context.Context, in *ValidateUserIdRequest, opts ...grpc.CallOption) (*ValidateUserIdResponse, error)
}

type discordClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordClient(cc grpc.ClientConnInterface) DiscordClient {
	return &discordClient{cc}
}

func (c *discordClient) GetOAuthUrl(ctx context.Context, in *GetOAuthUrlRequest, opts ...grpc.CallOption) (*GetOAuthUrlResponse, error) {
	out := new(GetOAuthUrlResponse)
	err := c.cc.Invoke(ctx, Discord_GetOAuthUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) LoginWithDiscord(ctx context.Context, in *LoginWithDiscordRequest, opts ...grpc.CallOption) (*LoginWithDiscordResponse, error) {
	out := new(LoginWithDiscordResponse)
	err := c.cc.Invoke(ctx, Discord_LoginWithDiscord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*LoginWithDiscordResponse, error) {
	out := new(LoginWithDiscordResponse)
	err := c.cc.Invoke(ctx, Discord_RefreshAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetMyInfo(ctx context.Context, in *GetMyInfoRequest, opts ...grpc.CallOption) (*GetMyInfoResponse, error) {
	out := new(GetMyInfoResponse)
	err := c.cc.Invoke(ctx, Discord_GetMyInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) ValidateGuildId(ctx context.Context, in *ValidateGuildIdRequest, opts ...grpc.CallOption) (*ValidateGuildIdResponse, error) {
	out := new(ValidateGuildIdResponse)
	err := c.cc.Invoke(ctx, Discord_ValidateGuildId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) ValidateUserId(ctx context.Context, in *ValidateUserIdRequest, opts ...grpc.CallOption) (*ValidateUserIdResponse, error) {
	out := new(ValidateUserIdResponse)
	err := c.cc.Invoke(ctx, Discord_ValidateUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServer is the server API for Discord service.
// All implementations must embed UnimplementedDiscordServer
// for forward compatibility
type DiscordServer interface {
	GetOAuthUrl(context.Context, *GetOAuthUrlRequest) (*GetOAuthUrlResponse, error)
	LoginWithDiscord(context.Context, *LoginWithDiscordRequest) (*LoginWithDiscordResponse, error)
	RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*LoginWithDiscordResponse, error)
	GetMyInfo(context.Context, *GetMyInfoRequest) (*GetMyInfoResponse, error)
	ValidateGuildId(context.Context, *ValidateGuildIdRequest) (*ValidateGuildIdResponse, error)
	ValidateUserId(context.Context, *ValidateUserIdRequest) (*ValidateUserIdResponse, error)
	mustEmbedUnimplementedDiscordServer()
}

// UnimplementedDiscordServer must be embedded to have forward compatible implementations.
type UnimplementedDiscordServer struct {
}

func (UnimplementedDiscordServer) GetOAuthUrl(context.Context, *GetOAuthUrlRequest) (*GetOAuthUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthUrl not implemented")
}
func (UnimplementedDiscordServer) LoginWithDiscord(context.Context, *LoginWithDiscordRequest) (*LoginWithDiscordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithDiscord not implemented")
}
func (UnimplementedDiscordServer) RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*LoginWithDiscordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAccessToken not implemented")
}
func (UnimplementedDiscordServer) GetMyInfo(context.Context, *GetMyInfoRequest) (*GetMyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyInfo not implemented")
}
func (UnimplementedDiscordServer) ValidateGuildId(context.Context, *ValidateGuildIdRequest) (*ValidateGuildIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateGuildId not implemented")
}
func (UnimplementedDiscordServer) ValidateUserId(context.Context, *ValidateUserIdRequest) (*ValidateUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserId not implemented")
}
func (UnimplementedDiscordServer) mustEmbedUnimplementedDiscordServer() {}

// UnsafeDiscordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordServer will
// result in compilation errors.
type UnsafeDiscordServer interface {
	mustEmbedUnimplementedDiscordServer()
}

func RegisterDiscordServer(s grpc.ServiceRegistrar, srv DiscordServer) {
	s.RegisterService(&Discord_ServiceDesc, srv)
}

func _Discord_GetOAuthUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetOAuthUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_GetOAuthUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetOAuthUrl(ctx, req.(*GetOAuthUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_LoginWithDiscord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithDiscordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).LoginWithDiscord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_LoginWithDiscord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).LoginWithDiscord(ctx, req.(*LoginWithDiscordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_RefreshAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).RefreshAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_RefreshAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).RefreshAccessToken(ctx, req.(*RefreshAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetMyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetMyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_GetMyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetMyInfo(ctx, req.(*GetMyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_ValidateGuildId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateGuildIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ValidateGuildId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_ValidateGuildId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ValidateGuildId(ctx, req.(*ValidateGuildIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_ValidateUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ValidateUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_ValidateUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ValidateUserId(ctx, req.(*ValidateUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Discord_ServiceDesc is the grpc.ServiceDesc for Discord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discord.Discord",
	HandlerType: (*DiscordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOAuthUrl",
			Handler:    _Discord_GetOAuthUrl_Handler,
		},
		{
			MethodName: "LoginWithDiscord",
			Handler:    _Discord_LoginWithDiscord_Handler,
		},
		{
			MethodName: "RefreshAccessToken",
			Handler:    _Discord_RefreshAccessToken_Handler,
		},
		{
			MethodName: "GetMyInfo",
			Handler:    _Discord_GetMyInfo_Handler,
		},
		{
			MethodName: "ValidateGuildId",
			Handler:    _Discord_ValidateGuildId_Handler,
		},
		{
			MethodName: "ValidateUserId",
			Handler:    _Discord_ValidateUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
