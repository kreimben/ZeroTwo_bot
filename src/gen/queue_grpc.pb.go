// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: queue.proto

package protobuf_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueueService_CurrentQueue_FullMethodName       = "/queue.QueueService/CurrentQueue"
	QueueService_RemoveSong_FullMethodName         = "/queue.QueueService/RemoveSong"
	QueueService_SkipSong_FullMethodName           = "/queue.QueueService/SkipSong"
	QueueService_RepeatSong_FullMethodName         = "/queue.QueueService/RepeatSong"
	QueueService_ShuffleQueue_FullMethodName       = "/queue.QueueService/ShuffleQueue"
	QueueService_ChangeSongPosition_FullMethodName = "/queue.QueueService/ChangeSongPosition"
	QueueService_TimeStamp_FullMethodName          = "/queue.QueueService/TimeStamp"
)

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	CurrentQueue(ctx context.Context, in *CurrentQueueRequest, opts ...grpc.CallOption) (*CurrentQueueResponse, error)
	RemoveSong(ctx context.Context, in *RemoveSongRequest, opts ...grpc.CallOption) (*RemoveSongResponse, error)
	SkipSong(ctx context.Context, in *SkipSongRequest, opts ...grpc.CallOption) (*SkipSongResponse, error)
	RepeatSong(ctx context.Context, in *RepeatSongRequest, opts ...grpc.CallOption) (*RepeatSongResponse, error)
	ShuffleQueue(ctx context.Context, in *ShuffleQueueRequest, opts ...grpc.CallOption) (*ShuffleQueueResponse, error)
	ChangeSongPosition(ctx context.Context, in *ChangeSongPositionRequest, opts ...grpc.CallOption) (*ChangeSongPositionResponse, error)
	TimeStamp(ctx context.Context, in *TimeStampRequest, opts ...grpc.CallOption) (QueueService_TimeStampClient, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) CurrentQueue(ctx context.Context, in *CurrentQueueRequest, opts ...grpc.CallOption) (*CurrentQueueResponse, error) {
	out := new(CurrentQueueResponse)
	err := c.cc.Invoke(ctx, QueueService_CurrentQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) RemoveSong(ctx context.Context, in *RemoveSongRequest, opts ...grpc.CallOption) (*RemoveSongResponse, error) {
	out := new(RemoveSongResponse)
	err := c.cc.Invoke(ctx, QueueService_RemoveSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) SkipSong(ctx context.Context, in *SkipSongRequest, opts ...grpc.CallOption) (*SkipSongResponse, error) {
	out := new(SkipSongResponse)
	err := c.cc.Invoke(ctx, QueueService_SkipSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) RepeatSong(ctx context.Context, in *RepeatSongRequest, opts ...grpc.CallOption) (*RepeatSongResponse, error) {
	out := new(RepeatSongResponse)
	err := c.cc.Invoke(ctx, QueueService_RepeatSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) ShuffleQueue(ctx context.Context, in *ShuffleQueueRequest, opts ...grpc.CallOption) (*ShuffleQueueResponse, error) {
	out := new(ShuffleQueueResponse)
	err := c.cc.Invoke(ctx, QueueService_ShuffleQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) ChangeSongPosition(ctx context.Context, in *ChangeSongPositionRequest, opts ...grpc.CallOption) (*ChangeSongPositionResponse, error) {
	out := new(ChangeSongPositionResponse)
	err := c.cc.Invoke(ctx, QueueService_ChangeSongPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) TimeStamp(ctx context.Context, in *TimeStampRequest, opts ...grpc.CallOption) (QueueService_TimeStampClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueueService_ServiceDesc.Streams[0], QueueService_TimeStamp_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queueServiceTimeStampClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueueService_TimeStampClient interface {
	Recv() (*TimeStampResponse, error)
	grpc.ClientStream
}

type queueServiceTimeStampClient struct {
	grpc.ClientStream
}

func (x *queueServiceTimeStampClient) Recv() (*TimeStampResponse, error) {
	m := new(TimeStampResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	CurrentQueue(context.Context, *CurrentQueueRequest) (*CurrentQueueResponse, error)
	RemoveSong(context.Context, *RemoveSongRequest) (*RemoveSongResponse, error)
	SkipSong(context.Context, *SkipSongRequest) (*SkipSongResponse, error)
	RepeatSong(context.Context, *RepeatSongRequest) (*RepeatSongResponse, error)
	ShuffleQueue(context.Context, *ShuffleQueueRequest) (*ShuffleQueueResponse, error)
	ChangeSongPosition(context.Context, *ChangeSongPositionRequest) (*ChangeSongPositionResponse, error)
	TimeStamp(*TimeStampRequest, QueueService_TimeStampServer) error
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) CurrentQueue(context.Context, *CurrentQueueRequest) (*CurrentQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentQueue not implemented")
}
func (UnimplementedQueueServiceServer) RemoveSong(context.Context, *RemoveSongRequest) (*RemoveSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSong not implemented")
}
func (UnimplementedQueueServiceServer) SkipSong(context.Context, *SkipSongRequest) (*SkipSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipSong not implemented")
}
func (UnimplementedQueueServiceServer) RepeatSong(context.Context, *RepeatSongRequest) (*RepeatSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatSong not implemented")
}
func (UnimplementedQueueServiceServer) ShuffleQueue(context.Context, *ShuffleQueueRequest) (*ShuffleQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShuffleQueue not implemented")
}
func (UnimplementedQueueServiceServer) ChangeSongPosition(context.Context, *ChangeSongPositionRequest) (*ChangeSongPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSongPosition not implemented")
}
func (UnimplementedQueueServiceServer) TimeStamp(*TimeStampRequest, QueueService_TimeStampServer) error {
	return status.Errorf(codes.Unimplemented, "method TimeStamp not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_CurrentQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).CurrentQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_CurrentQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).CurrentQueue(ctx, req.(*CurrentQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_RemoveSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).RemoveSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_RemoveSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).RemoveSong(ctx, req.(*RemoveSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_SkipSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).SkipSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_SkipSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).SkipSong(ctx, req.(*SkipSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_RepeatSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).RepeatSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_RepeatSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).RepeatSong(ctx, req.(*RepeatSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_ShuffleQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShuffleQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).ShuffleQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_ShuffleQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).ShuffleQueue(ctx, req.(*ShuffleQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_ChangeSongPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSongPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).ChangeSongPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_ChangeSongPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).ChangeSongPosition(ctx, req.(*ChangeSongPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_TimeStamp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeStampRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueServiceServer).TimeStamp(m, &queueServiceTimeStampServer{stream})
}

type QueueService_TimeStampServer interface {
	Send(*TimeStampResponse) error
	grpc.ServerStream
}

type queueServiceTimeStampServer struct {
	grpc.ServerStream
}

func (x *queueServiceTimeStampServer) Send(m *TimeStampResponse) error {
	return x.ServerStream.SendMsg(m)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentQueue",
			Handler:    _QueueService_CurrentQueue_Handler,
		},
		{
			MethodName: "RemoveSong",
			Handler:    _QueueService_RemoveSong_Handler,
		},
		{
			MethodName: "SkipSong",
			Handler:    _QueueService_SkipSong_Handler,
		},
		{
			MethodName: "RepeatSong",
			Handler:    _QueueService_RepeatSong_Handler,
		},
		{
			MethodName: "ShuffleQueue",
			Handler:    _QueueService_ShuffleQueue_Handler,
		},
		{
			MethodName: "ChangeSongPosition",
			Handler:    _QueueService_ChangeSongPosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TimeStamp",
			Handler:       _QueueService_TimeStamp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "queue.proto",
}
