// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: voice_channel.proto

package protobuf_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VoiceChannelService_WhereAmI_FullMethodName = "/queue.VoiceChannelService/WhereAmI"
)

// VoiceChannelServiceClient is the client API for VoiceChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceChannelServiceClient interface {
	// response whenever the user changes channel.
	// Client should use this rpc to update the user's current channel per 5 seconds.
	// If the user is not in a voice channel, the response will return `NotFound` code.
	WhereAmI(ctx context.Context, in *WhereAmIRequest, opts ...grpc.CallOption) (*WhereAmIResponse, error)
}

type voiceChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceChannelServiceClient(cc grpc.ClientConnInterface) VoiceChannelServiceClient {
	return &voiceChannelServiceClient{cc}
}

func (c *voiceChannelServiceClient) WhereAmI(ctx context.Context, in *WhereAmIRequest, opts ...grpc.CallOption) (*WhereAmIResponse, error) {
	out := new(WhereAmIResponse)
	err := c.cc.Invoke(ctx, VoiceChannelService_WhereAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceChannelServiceServer is the server API for VoiceChannelService service.
// All implementations must embed UnimplementedVoiceChannelServiceServer
// for forward compatibility
type VoiceChannelServiceServer interface {
	// response whenever the user changes channel.
	// Client should use this rpc to update the user's current channel per 5 seconds.
	// If the user is not in a voice channel, the response will return `NotFound` code.
	WhereAmI(context.Context, *WhereAmIRequest) (*WhereAmIResponse, error)
	mustEmbedUnimplementedVoiceChannelServiceServer()
}

// UnimplementedVoiceChannelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceChannelServiceServer struct {
}

func (UnimplementedVoiceChannelServiceServer) WhereAmI(context.Context, *WhereAmIRequest) (*WhereAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhereAmI not implemented")
}
func (UnimplementedVoiceChannelServiceServer) mustEmbedUnimplementedVoiceChannelServiceServer() {}

// UnsafeVoiceChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceChannelServiceServer will
// result in compilation errors.
type UnsafeVoiceChannelServiceServer interface {
	mustEmbedUnimplementedVoiceChannelServiceServer()
}

func RegisterVoiceChannelServiceServer(s grpc.ServiceRegistrar, srv VoiceChannelServiceServer) {
	s.RegisterService(&VoiceChannelService_ServiceDesc, srv)
}

func _VoiceChannelService_WhereAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhereAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceChannelServiceServer).WhereAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoiceChannelService_WhereAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceChannelServiceServer).WhereAmI(ctx, req.(*WhereAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoiceChannelService_ServiceDesc is the grpc.ServiceDesc for VoiceChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.VoiceChannelService",
	HandlerType: (*VoiceChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhereAmI",
			Handler:    _VoiceChannelService_WhereAmI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voice_channel.proto",
}
